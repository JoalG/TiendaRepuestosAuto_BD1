//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TiendaRepuestosAuto_BD1_WEB.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TiendaRepuestosAuto_BD1Entities5 : DbContext
    {
        public TiendaRepuestosAuto_BD1Entities5()
            : base("name=TiendaRepuestosAuto_BD1Entities5")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Contacto> Contacto { get; set; }
        public virtual DbSet<Detalle> Detalle { get; set; }
        public virtual DbSet<EstadoDeCliente> EstadoDeCliente { get; set; }
        public virtual DbSet<FabricanteDeAutos> FabricanteDeAutos { get; set; }
        public virtual DbSet<FabricanteDePiezas> FabricanteDePiezas { get; set; }
        public virtual DbSet<Orden> Orden { get; set; }
        public virtual DbSet<Organizacion> Organizacion { get; set; }
        public virtual DbSet<Parte> Parte { get; set; }
        public virtual DbSet<ParteParaTipoDeAutomovil> ParteParaTipoDeAutomovil { get; set; }
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Proveido> Proveido { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Telefono> Telefono { get; set; }
        public virtual DbSet<TelefonoProveedor> TelefonoProveedor { get; set; }
        public virtual DbSet<TipoDeAutomovil> TipoDeAutomovil { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spAddClienteAndOrganizacion(Nullable<int> cedulaJuridica, string nombre, string direccion, string ciudad, Nullable<int> iD_EstadoDeCliente, string nombreContacto, Nullable<long> telefono, string cargo, ObjectParameter opReturn)
        {
            var cedulaJuridicaParameter = cedulaJuridica.HasValue ?
                new ObjectParameter("CedulaJuridica", cedulaJuridica) :
                new ObjectParameter("CedulaJuridica", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var iD_EstadoDeClienteParameter = iD_EstadoDeCliente.HasValue ?
                new ObjectParameter("ID_EstadoDeCliente", iD_EstadoDeCliente) :
                new ObjectParameter("ID_EstadoDeCliente", typeof(int));
    
            var nombreContactoParameter = nombreContacto != null ?
                new ObjectParameter("NombreContacto", nombreContacto) :
                new ObjectParameter("NombreContacto", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(long));
    
            var cargoParameter = cargo != null ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddClienteAndOrganizacion", cedulaJuridicaParameter, nombreParameter, direccionParameter, ciudadParameter, iD_EstadoDeClienteParameter, nombreContactoParameter, telefonoParameter, cargoParameter, opReturn);
        }
    
        public virtual int spAddClienteAndPersona(Nullable<int> cedula, string nombre, string direccion, string ciudad, Nullable<int> iD_EstadoDeCliente)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var iD_EstadoDeClienteParameter = iD_EstadoDeCliente.HasValue ?
                new ObjectParameter("ID_EstadoDeCliente", iD_EstadoDeCliente) :
                new ObjectParameter("ID_EstadoDeCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddClienteAndPersona", cedulaParameter, nombreParameter, direccionParameter, ciudadParameter, iD_EstadoDeClienteParameter);
        }
    
        public virtual int spAddClienteAndPersona2(Nullable<int> cedula, string nombre, string direccion, string ciudad, Nullable<int> iD_EstadoDeCliente, ObjectParameter opReturn)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var iD_EstadoDeClienteParameter = iD_EstadoDeCliente.HasValue ?
                new ObjectParameter("ID_EstadoDeCliente", iD_EstadoDeCliente) :
                new ObjectParameter("ID_EstadoDeCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddClienteAndPersona2", cedulaParameter, nombreParameter, direccionParameter, ciudadParameter, iD_EstadoDeClienteParameter, opReturn);
        }
    
        public virtual int spAddDetalleOrden(Nullable<int> iD_Orden, Nullable<int> iD_Proveedor, Nullable<int> iD_Parte, Nullable<int> cantidad)
        {
            var iD_OrdenParameter = iD_Orden.HasValue ?
                new ObjectParameter("ID_Orden", iD_Orden) :
                new ObjectParameter("ID_Orden", typeof(int));
    
            var iD_ProveedorParameter = iD_Proveedor.HasValue ?
                new ObjectParameter("ID_Proveedor", iD_Proveedor) :
                new ObjectParameter("ID_Proveedor", typeof(int));
    
            var iD_ParteParameter = iD_Parte.HasValue ?
                new ObjectParameter("ID_Parte", iD_Parte) :
                new ObjectParameter("ID_Parte", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddDetalleOrden", iD_OrdenParameter, iD_ProveedorParameter, iD_ParteParameter, cantidadParameter);
        }
    
        public virtual int spAddOrden(Nullable<int> iD_Cliente, Nullable<System.DateTime> fecha)
        {
            var iD_ClienteParameter = iD_Cliente.HasValue ?
                new ObjectParameter("ID_Cliente", iD_Cliente) :
                new ObjectParameter("ID_Cliente", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddOrden", iD_ClienteParameter, fechaParameter);
        }
    
        public virtual int spAddParte(string nombre, string marca, Nullable<int> iD_Fabricante, ObjectParameter opReturn)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("Marca", marca) :
                new ObjectParameter("Marca", typeof(string));
    
            var iD_FabricanteParameter = iD_Fabricante.HasValue ?
                new ObjectParameter("ID_Fabricante", iD_Fabricante) :
                new ObjectParameter("ID_Fabricante", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddParte", nombreParameter, marcaParameter, iD_FabricanteParameter, opReturn);
        }
    
        public virtual int spAddPersonaOnly(Nullable<int> cedula, string nombre, Nullable<int> iD_ClientePersona)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var iD_ClientePersonaParameter = iD_ClientePersona.HasValue ?
                new ObjectParameter("ID_ClientePersona", iD_ClientePersona) :
                new ObjectParameter("ID_ClientePersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddPersonaOnly", cedulaParameter, nombreParameter, iD_ClientePersonaParameter);
        }
    
        public virtual int spAddTelefonoPersona(Nullable<int> cedula, Nullable<long> numeroDeTelfono)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var numeroDeTelfonoParameter = numeroDeTelfono.HasValue ?
                new ObjectParameter("NumeroDeTelfono", numeroDeTelfono) :
                new ObjectParameter("NumeroDeTelfono", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddTelefonoPersona", cedulaParameter, numeroDeTelfonoParameter);
        }
    
        public virtual int spAssociateParteConProveedor(Nullable<int> iD_Parte, Nullable<int> iD_Proveedor, Nullable<decimal> precio, Nullable<decimal> ganancia, ObjectParameter opReturn)
        {
            var iD_ParteParameter = iD_Parte.HasValue ?
                new ObjectParameter("ID_Parte", iD_Parte) :
                new ObjectParameter("ID_Parte", typeof(int));
    
            var iD_ProveedorParameter = iD_Proveedor.HasValue ?
                new ObjectParameter("ID_Proveedor", iD_Proveedor) :
                new ObjectParameter("ID_Proveedor", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var gananciaParameter = ganancia.HasValue ?
                new ObjectParameter("Ganancia", ganancia) :
                new ObjectParameter("Ganancia", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAssociateParteConProveedor", iD_ParteParameter, iD_ProveedorParameter, precioParameter, gananciaParameter, opReturn);
        }
    
        public virtual int spAssociateParteConTipoDeAutomovil(Nullable<int> iD_Parte, Nullable<int> iD_TipoDeAutomovil, Nullable<int> iD_FabricanteDeAutos, ObjectParameter opReturn)
        {
            var iD_ParteParameter = iD_Parte.HasValue ?
                new ObjectParameter("ID_Parte", iD_Parte) :
                new ObjectParameter("ID_Parte", typeof(int));
    
            var iD_TipoDeAutomovilParameter = iD_TipoDeAutomovil.HasValue ?
                new ObjectParameter("ID_TipoDeAutomovil", iD_TipoDeAutomovil) :
                new ObjectParameter("ID_TipoDeAutomovil", typeof(int));
    
            var iD_FabricanteDeAutosParameter = iD_FabricanteDeAutos.HasValue ?
                new ObjectParameter("ID_FabricanteDeAutos", iD_FabricanteDeAutos) :
                new ObjectParameter("ID_FabricanteDeAutos", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAssociateParteConTipoDeAutomovil", iD_ParteParameter, iD_TipoDeAutomovilParameter, iD_FabricanteDeAutosParameter, opReturn);
        }
    
        public virtual int spBorrarParte(Nullable<int> iD_Parte, ObjectParameter opReturn)
        {
            var iD_ParteParameter = iD_Parte.HasValue ?
                new ObjectParameter("ID_Parte", iD_Parte) :
                new ObjectParameter("ID_Parte", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBorrarParte", iD_ParteParameter, opReturn);
        }
    
        public virtual int spClienteSetActive(Nullable<int> iD_Cliente)
        {
            var iD_ClienteParameter = iD_Cliente.HasValue ?
                new ObjectParameter("ID_Cliente", iD_Cliente) :
                new ObjectParameter("ID_Cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spClienteSetActive", iD_ClienteParameter);
        }
    
        public virtual int spEditTelefonoPersona(Nullable<int> cedula, Nullable<long> numeroDeTelfono, Nullable<long> numeroDeTelfonoAnt)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var numeroDeTelfonoParameter = numeroDeTelfono.HasValue ?
                new ObjectParameter("NumeroDeTelfono", numeroDeTelfono) :
                new ObjectParameter("NumeroDeTelfono", typeof(long));
    
            var numeroDeTelfonoAntParameter = numeroDeTelfonoAnt.HasValue ?
                new ObjectParameter("NumeroDeTelfonoAnt", numeroDeTelfonoAnt) :
                new ObjectParameter("NumeroDeTelfonoAnt", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEditTelefonoPersona", cedulaParameter, numeroDeTelfonoParameter, numeroDeTelfonoAntParameter);
        }
    
        public virtual int spFindNameCliente(Nullable<int> iD_Cliente, ObjectParameter opReturn)
        {
            var iD_ClienteParameter = iD_Cliente.HasValue ?
                new ObjectParameter("ID_Cliente", iD_Cliente) :
                new ObjectParameter("ID_Cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFindNameCliente", iD_ClienteParameter, opReturn);
        }
    
        public virtual ObjectResult<spFindPartePorModeloAño_Result> spFindPartePorModeloAño(string model, Nullable<int> año)
        {
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFindPartePorModeloAño_Result>("spFindPartePorModeloAño", modelParameter, añoParameter);
        }
    
        public virtual ObjectResult<spFindProveedorParaParte_Result> spFindProveedorParaParte(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFindProveedorParaParte_Result>("spFindProveedorParaParte", nombreParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spFindTiposDeAutoMovilForParte(Nullable<int> iD_Parte)
        {
            var iD_ParteParameter = iD_Parte.HasValue ?
                new ObjectParameter("ID_Parte", iD_Parte) :
                new ObjectParameter("ID_Parte", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spFindTiposDeAutoMovilForParte", iD_ParteParameter);
        }
    
        public virtual ObjectResult<spGetOrdenesOrganizacion_Result> spGetOrdenesOrganizacion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrdenesOrganizacion_Result>("spGetOrdenesOrganizacion");
        }
    
        public virtual ObjectResult<spGetOrdenesPersona_Result> spGetOrdenesPersona()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrdenesPersona_Result>("spGetOrdenesPersona");
        }
    
        public virtual int spModifyOrganizacion(Nullable<int> cedulaJuridica, string nombre, string direccion, string ciudad, Nullable<int> iD_EstadoDeCliente, string nombreContacto, Nullable<long> telefono, string cargo)
        {
            var cedulaJuridicaParameter = cedulaJuridica.HasValue ?
                new ObjectParameter("cedulaJuridica", cedulaJuridica) :
                new ObjectParameter("cedulaJuridica", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var iD_EstadoDeClienteParameter = iD_EstadoDeCliente.HasValue ?
                new ObjectParameter("ID_EstadoDeCliente", iD_EstadoDeCliente) :
                new ObjectParameter("ID_EstadoDeCliente", typeof(int));
    
            var nombreContactoParameter = nombreContacto != null ?
                new ObjectParameter("NombreContacto", nombreContacto) :
                new ObjectParameter("NombreContacto", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(long));
    
            var cargoParameter = cargo != null ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spModifyOrganizacion", cedulaJuridicaParameter, nombreParameter, direccionParameter, ciudadParameter, iD_EstadoDeClienteParameter, nombreContactoParameter, telefonoParameter, cargoParameter);
        }
    
        public virtual int spModifyPersona(Nullable<int> cedula, string nombre, string direccion, string ciudad, Nullable<int> iD_EstadoDeCliente)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var iD_EstadoDeClienteParameter = iD_EstadoDeCliente.HasValue ?
                new ObjectParameter("ID_EstadoDeCliente", iD_EstadoDeCliente) :
                new ObjectParameter("ID_EstadoDeCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spModifyPersona", cedulaParameter, nombreParameter, direccionParameter, ciudadParameter, iD_EstadoDeClienteParameter);
        }
    
        public virtual int spModifyPrecioParteDeProvedor(Nullable<int> iD_Parte, Nullable<int> iD_Proveedor, Nullable<decimal> precio)
        {
            var iD_ParteParameter = iD_Parte.HasValue ?
                new ObjectParameter("ID_Parte", iD_Parte) :
                new ObjectParameter("ID_Parte", typeof(int));
    
            var iD_ProveedorParameter = iD_Proveedor.HasValue ?
                new ObjectParameter("ID_Proveedor", iD_Proveedor) :
                new ObjectParameter("ID_Proveedor", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spModifyPrecioParteDeProvedor", iD_ParteParameter, iD_ProveedorParameter, precioParameter);
        }
    
        public virtual int spSuspenderOrganizacion(Nullable<int> cedulaJuridica)
        {
            var cedulaJuridicaParameter = cedulaJuridica.HasValue ?
                new ObjectParameter("cedulaJuridica", cedulaJuridica) :
                new ObjectParameter("cedulaJuridica", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSuspenderOrganizacion", cedulaJuridicaParameter);
        }
    
        public virtual int spSuspenderPersona(Nullable<int> cedula)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSuspenderPersona", cedulaParameter);
        }
    
        public virtual int spAddClienteAndOrganizacion2(Nullable<long> cedulaJuridica, string nombre, string direccion, string ciudad, Nullable<int> iD_EstadoDeCliente, string nombreContacto, Nullable<long> telefono, string cargo, ObjectParameter opReturn)
        {
            var cedulaJuridicaParameter = cedulaJuridica.HasValue ?
                new ObjectParameter("CedulaJuridica", cedulaJuridica) :
                new ObjectParameter("CedulaJuridica", typeof(long));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var iD_EstadoDeClienteParameter = iD_EstadoDeCliente.HasValue ?
                new ObjectParameter("ID_EstadoDeCliente", iD_EstadoDeCliente) :
                new ObjectParameter("ID_EstadoDeCliente", typeof(int));
    
            var nombreContactoParameter = nombreContacto != null ?
                new ObjectParameter("NombreContacto", nombreContacto) :
                new ObjectParameter("NombreContacto", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(long));
    
            var cargoParameter = cargo != null ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddClienteAndOrganizacion2", cedulaJuridicaParameter, nombreParameter, direccionParameter, ciudadParameter, iD_EstadoDeClienteParameter, nombreContactoParameter, telefonoParameter, cargoParameter, opReturn);
        }
    
        public virtual int spModifyOrganizacion2(Nullable<long> cedulaJuridica, string nombre, string direccion, string ciudad, Nullable<int> iD_EstadoDeCliente, string nombreContacto, Nullable<long> telefono, string cargo)
        {
            var cedulaJuridicaParameter = cedulaJuridica.HasValue ?
                new ObjectParameter("cedulaJuridica", cedulaJuridica) :
                new ObjectParameter("cedulaJuridica", typeof(long));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var iD_EstadoDeClienteParameter = iD_EstadoDeCliente.HasValue ?
                new ObjectParameter("ID_EstadoDeCliente", iD_EstadoDeCliente) :
                new ObjectParameter("ID_EstadoDeCliente", typeof(int));
    
            var nombreContactoParameter = nombreContacto != null ?
                new ObjectParameter("NombreContacto", nombreContacto) :
                new ObjectParameter("NombreContacto", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(long));
    
            var cargoParameter = cargo != null ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spModifyOrganizacion2", cedulaJuridicaParameter, nombreParameter, direccionParameter, ciudadParameter, iD_EstadoDeClienteParameter, nombreContactoParameter, telefonoParameter, cargoParameter);
        }
    
        public virtual int spClienteSetInactive(Nullable<int> iD_Cliente)
        {
            var iD_ClienteParameter = iD_Cliente.HasValue ?
                new ObjectParameter("ID_Cliente", iD_Cliente) :
                new ObjectParameter("ID_Cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spClienteSetInactive", iD_ClienteParameter);
        }
    
        public virtual int spSuspenderOrganizacion2(Nullable<long> cedulaJuridica)
        {
            var cedulaJuridicaParameter = cedulaJuridica.HasValue ?
                new ObjectParameter("cedulaJuridica", cedulaJuridica) :
                new ObjectParameter("cedulaJuridica", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSuspenderOrganizacion2", cedulaJuridicaParameter);
        }
    }
}
